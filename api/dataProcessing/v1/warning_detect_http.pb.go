// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type WarningDetectHTTPServer interface {
	BatchGetDeviceStateInfo(context.Context, *BatchGetDeviceStateRequest) (*BatchGetDeviceStateReply, error)
	BatchGetWarning(context.Context, *BatchGetWarningRequest) (*BatchGetWarningReply, error)
	DeleteDeviceStateInfo(context.Context, *DeleteDeviceStateRequest) (*DeleteDeviceStateReply, error)
	DeleteWarning(context.Context, *DeleteWarningRequest) (*DeleteWarningReply, error)
	UpdateWarning(context.Context, *UpdateWarningRequest) (*UpdateWarningReply, error)
}

func RegisterWarningDetectHTTPServer(s *http.Server, srv WarningDetectHTTPServer) {
	r := s.Route("/")
	r.GET("/states/{device_class_id}", _WarningDetect_BatchGetDeviceStateInfo0_HTTP_Handler(srv))
	r.DELETE("/states/{device_class_id}", _WarningDetect_DeleteDeviceStateInfo0_HTTP_Handler(srv))
	r.GET("/warnings", _WarningDetect_BatchGetWarning0_HTTP_Handler(srv))
	r.DELETE("/warnings", _WarningDetect_DeleteWarning0_HTTP_Handler(srv))
	r.PUT("/warnings", _WarningDetect_UpdateWarning0_HTTP_Handler(srv))
}

func _WarningDetect_BatchGetDeviceStateInfo0_HTTP_Handler(srv WarningDetectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchGetDeviceStateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.dataProcessing.v1.WarningDetect/BatchGetDeviceStateInfo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchGetDeviceStateInfo(ctx, req.(*BatchGetDeviceStateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchGetDeviceStateReply)
		return ctx.Result(200, reply)
	}
}

func _WarningDetect_DeleteDeviceStateInfo0_HTTP_Handler(srv WarningDetectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDeviceStateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.dataProcessing.v1.WarningDetect/DeleteDeviceStateInfo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDeviceStateInfo(ctx, req.(*DeleteDeviceStateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDeviceStateReply)
		return ctx.Result(200, reply)
	}
}

func _WarningDetect_BatchGetWarning0_HTTP_Handler(srv WarningDetectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchGetWarningRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.dataProcessing.v1.WarningDetect/BatchGetWarning")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchGetWarning(ctx, req.(*BatchGetWarningRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchGetWarningReply)
		return ctx.Result(200, reply)
	}
}

func _WarningDetect_DeleteWarning0_HTTP_Handler(srv WarningDetectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteWarningRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.dataProcessing.v1.WarningDetect/DeleteWarning")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteWarning(ctx, req.(*DeleteWarningRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteWarningReply)
		return ctx.Result(200, reply)
	}
}

func _WarningDetect_UpdateWarning0_HTTP_Handler(srv WarningDetectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWarningRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.dataProcessing.v1.WarningDetect/UpdateWarning")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateWarning(ctx, req.(*UpdateWarningRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateWarningReply)
		return ctx.Result(200, reply)
	}
}

type WarningDetectHTTPClient interface {
	BatchGetDeviceStateInfo(ctx context.Context, req *BatchGetDeviceStateRequest, opts ...http.CallOption) (rsp *BatchGetDeviceStateReply, err error)
	BatchGetWarning(ctx context.Context, req *BatchGetWarningRequest, opts ...http.CallOption) (rsp *BatchGetWarningReply, err error)
	DeleteDeviceStateInfo(ctx context.Context, req *DeleteDeviceStateRequest, opts ...http.CallOption) (rsp *DeleteDeviceStateReply, err error)
	DeleteWarning(ctx context.Context, req *DeleteWarningRequest, opts ...http.CallOption) (rsp *DeleteWarningReply, err error)
	UpdateWarning(ctx context.Context, req *UpdateWarningRequest, opts ...http.CallOption) (rsp *UpdateWarningReply, err error)
}

type WarningDetectHTTPClientImpl struct {
	cc *http.Client
}

func NewWarningDetectHTTPClient(client *http.Client) WarningDetectHTTPClient {
	return &WarningDetectHTTPClientImpl{client}
}

func (c *WarningDetectHTTPClientImpl) BatchGetDeviceStateInfo(ctx context.Context, in *BatchGetDeviceStateRequest, opts ...http.CallOption) (*BatchGetDeviceStateReply, error) {
	var out BatchGetDeviceStateReply
	pattern := "/states/{device_class_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.dataProcessing.v1.WarningDetect/BatchGetDeviceStateInfo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WarningDetectHTTPClientImpl) BatchGetWarning(ctx context.Context, in *BatchGetWarningRequest, opts ...http.CallOption) (*BatchGetWarningReply, error) {
	var out BatchGetWarningReply
	pattern := "/warnings"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.dataProcessing.v1.WarningDetect/BatchGetWarning"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WarningDetectHTTPClientImpl) DeleteDeviceStateInfo(ctx context.Context, in *DeleteDeviceStateRequest, opts ...http.CallOption) (*DeleteDeviceStateReply, error) {
	var out DeleteDeviceStateReply
	pattern := "/states/{device_class_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.dataProcessing.v1.WarningDetect/DeleteDeviceStateInfo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WarningDetectHTTPClientImpl) DeleteWarning(ctx context.Context, in *DeleteWarningRequest, opts ...http.CallOption) (*DeleteWarningReply, error) {
	var out DeleteWarningReply
	pattern := "/warnings"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.dataProcessing.v1.WarningDetect/DeleteWarning"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WarningDetectHTTPClientImpl) UpdateWarning(ctx context.Context, in *UpdateWarningRequest, opts ...http.CallOption) (*UpdateWarningReply, error) {
	var out UpdateWarningReply
	pattern := "/warnings"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.dataProcessing.v1.WarningDetect/UpdateWarning"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
