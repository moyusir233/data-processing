// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	v1 "gitee.com/moyusir/util/api/util/v1"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ConfigHTTPServer interface {
	GetDeviceConfig(context.Context, *GetDeviceConfigRequest) (*v1.TestedDeviceConfig, error)
}

func RegisterConfigHTTPServer(s *http.Server, srv ConfigHTTPServer) {
	r := s.Route("/")
	r.GET("/configs", _Config_GetDeviceConfig0_HTTP_Handler(srv))
}

func _Config_GetDeviceConfig0_HTTP_Handler(srv ConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDeviceConfigRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.dataProcessing.v1.Config/GetDeviceConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDeviceConfig(ctx, req.(*GetDeviceConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.TestedDeviceConfig)
		return ctx.Result(200, reply)
	}
}

type ConfigHTTPClient interface {
	GetDeviceConfig(ctx context.Context, req *GetDeviceConfigRequest, opts ...http.CallOption) (rsp *v1.TestedDeviceConfig, err error)
}

type ConfigHTTPClientImpl struct {
	cc *http.Client
}

func NewConfigHTTPClient(client *http.Client) ConfigHTTPClient {
	return &ConfigHTTPClientImpl{client}
}

func (c *ConfigHTTPClientImpl) GetDeviceConfig(ctx context.Context, in *GetDeviceConfigRequest, opts ...http.CallOption) (*v1.TestedDeviceConfig, error) {
	var out v1.TestedDeviceConfig
	pattern := "/configs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.dataProcessing.v1.Config/GetDeviceConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
