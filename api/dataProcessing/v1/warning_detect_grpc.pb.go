// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api/dataProcessing/v1/warning_detect.proto

package v1

import (
	context "context"
	v1 "gitee.com/moyusir/util/api/util/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WarningDetectClient is the client API for WarningDetect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarningDetectClient interface {
	BatchGetDeviceState0(ctx context.Context, in *BatchGetDeviceStateRequest, opts ...grpc.CallOption) (*BatchGetDeviceStateReply0, error)
	BatchGetDeviceState1(ctx context.Context, in *BatchGetDeviceStateRequest, opts ...grpc.CallOption) (*BatchGetDeviceStateReply1, error)
	// 分页查询用户的警告消息
	BatchGetWarning(ctx context.Context, in *BatchGetWarningRequest, opts ...grpc.CallOption) (*BatchGetWarningReply, error)
	// 查询指定设备注册的预警规则
	GetDeviceStateRegisterInfo(ctx context.Context, in *GetDeviceStateRegisterInfoRequest, opts ...grpc.CallOption) (*v1.DeviceStateRegisterInfo, error)
}

type warningDetectClient struct {
	cc grpc.ClientConnInterface
}

func NewWarningDetectClient(cc grpc.ClientConnInterface) WarningDetectClient {
	return &warningDetectClient{cc}
}

func (c *warningDetectClient) BatchGetDeviceState0(ctx context.Context, in *BatchGetDeviceStateRequest, opts ...grpc.CallOption) (*BatchGetDeviceStateReply0, error) {
	out := new(BatchGetDeviceStateReply0)
	err := c.cc.Invoke(ctx, "/api.dataProcessing.v1.WarningDetect/BatchGetDeviceState0", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warningDetectClient) BatchGetDeviceState1(ctx context.Context, in *BatchGetDeviceStateRequest, opts ...grpc.CallOption) (*BatchGetDeviceStateReply1, error) {
	out := new(BatchGetDeviceStateReply1)
	err := c.cc.Invoke(ctx, "/api.dataProcessing.v1.WarningDetect/BatchGetDeviceState1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warningDetectClient) BatchGetWarning(ctx context.Context, in *BatchGetWarningRequest, opts ...grpc.CallOption) (*BatchGetWarningReply, error) {
	out := new(BatchGetWarningReply)
	err := c.cc.Invoke(ctx, "/api.dataProcessing.v1.WarningDetect/BatchGetWarning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warningDetectClient) GetDeviceStateRegisterInfo(ctx context.Context, in *GetDeviceStateRegisterInfoRequest, opts ...grpc.CallOption) (*v1.DeviceStateRegisterInfo, error) {
	out := new(v1.DeviceStateRegisterInfo)
	err := c.cc.Invoke(ctx, "/api.dataProcessing.v1.WarningDetect/GetDeviceStateRegisterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarningDetectServer is the server API for WarningDetect service.
// All implementations must embed UnimplementedWarningDetectServer
// for forward compatibility
type WarningDetectServer interface {
	BatchGetDeviceState0(context.Context, *BatchGetDeviceStateRequest) (*BatchGetDeviceStateReply0, error)
	BatchGetDeviceState1(context.Context, *BatchGetDeviceStateRequest) (*BatchGetDeviceStateReply1, error)
	// 分页查询用户的警告消息
	BatchGetWarning(context.Context, *BatchGetWarningRequest) (*BatchGetWarningReply, error)
	// 查询指定设备注册的预警规则
	GetDeviceStateRegisterInfo(context.Context, *GetDeviceStateRegisterInfoRequest) (*v1.DeviceStateRegisterInfo, error)
	mustEmbedUnimplementedWarningDetectServer()
}

// UnimplementedWarningDetectServer must be embedded to have forward compatible implementations.
type UnimplementedWarningDetectServer struct {
}

func (UnimplementedWarningDetectServer) BatchGetDeviceState0(context.Context, *BatchGetDeviceStateRequest) (*BatchGetDeviceStateReply0, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetDeviceState0 not implemented")
}
func (UnimplementedWarningDetectServer) BatchGetDeviceState1(context.Context, *BatchGetDeviceStateRequest) (*BatchGetDeviceStateReply1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetDeviceState1 not implemented")
}
func (UnimplementedWarningDetectServer) BatchGetWarning(context.Context, *BatchGetWarningRequest) (*BatchGetWarningReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetWarning not implemented")
}
func (UnimplementedWarningDetectServer) GetDeviceStateRegisterInfo(context.Context, *GetDeviceStateRegisterInfoRequest) (*v1.DeviceStateRegisterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceStateRegisterInfo not implemented")
}
func (UnimplementedWarningDetectServer) mustEmbedUnimplementedWarningDetectServer() {}

// UnsafeWarningDetectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarningDetectServer will
// result in compilation errors.
type UnsafeWarningDetectServer interface {
	mustEmbedUnimplementedWarningDetectServer()
}

func RegisterWarningDetectServer(s grpc.ServiceRegistrar, srv WarningDetectServer) {
	s.RegisterService(&WarningDetect_ServiceDesc, srv)
}

func _WarningDetect_BatchGetDeviceState0_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetDeviceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarningDetectServer).BatchGetDeviceState0(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.dataProcessing.v1.WarningDetect/BatchGetDeviceState0",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarningDetectServer).BatchGetDeviceState0(ctx, req.(*BatchGetDeviceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarningDetect_BatchGetDeviceState1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetDeviceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarningDetectServer).BatchGetDeviceState1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.dataProcessing.v1.WarningDetect/BatchGetDeviceState1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarningDetectServer).BatchGetDeviceState1(ctx, req.(*BatchGetDeviceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarningDetect_BatchGetWarning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetWarningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarningDetectServer).BatchGetWarning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.dataProcessing.v1.WarningDetect/BatchGetWarning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarningDetectServer).BatchGetWarning(ctx, req.(*BatchGetWarningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarningDetect_GetDeviceStateRegisterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceStateRegisterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarningDetectServer).GetDeviceStateRegisterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.dataProcessing.v1.WarningDetect/GetDeviceStateRegisterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarningDetectServer).GetDeviceStateRegisterInfo(ctx, req.(*GetDeviceStateRegisterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WarningDetect_ServiceDesc is the grpc.ServiceDesc for WarningDetect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarningDetect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.dataProcessing.v1.WarningDetect",
	HandlerType: (*WarningDetectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchGetDeviceState0",
			Handler:    _WarningDetect_BatchGetDeviceState0_Handler,
		},
		{
			MethodName: "BatchGetDeviceState1",
			Handler:    _WarningDetect_BatchGetDeviceState1_Handler,
		},
		{
			MethodName: "BatchGetWarning",
			Handler:    _WarningDetect_BatchGetWarning_Handler,
		},
		{
			MethodName: "GetDeviceStateRegisterInfo",
			Handler:    _WarningDetect_GetDeviceStateRegisterInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/dataProcessing/v1/warning_detect.proto",
}
