// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api/dataProcessing/v1/warning_detect.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WarningDetectClient is the client API for WarningDetect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarningDetectClient interface {
	// 分页查询设备信息
	BatchGetDeviceStateInfo(ctx context.Context, in *BatchGetDeviceStateRequest, opts ...grpc.CallOption) (*BatchGetDeviceStateReply, error)
	// 删除设备状态信息
	DeleteDeviceStateInfo(ctx context.Context, in *DeleteDeviceStateRequest, opts ...grpc.CallOption) (*DeleteDeviceStateReply, error)
	// 分页查询用户的警告消息
	BatchGetWarning(ctx context.Context, in *BatchGetWarningRequest, opts ...grpc.CallOption) (*BatchGetWarningReply, error)
	// 删除用户的警告消息
	DeleteWarning(ctx context.Context, in *DeleteWarningRequest, opts ...grpc.CallOption) (*DeleteWarningReply, error)
	// 更新用户的警告消息的处理状态
	UpdateWarning(ctx context.Context, in *UpdateWarningRequest, opts ...grpc.CallOption) (*UpdateWarningReply, error)
}

type warningDetectClient struct {
	cc grpc.ClientConnInterface
}

func NewWarningDetectClient(cc grpc.ClientConnInterface) WarningDetectClient {
	return &warningDetectClient{cc}
}

func (c *warningDetectClient) BatchGetDeviceStateInfo(ctx context.Context, in *BatchGetDeviceStateRequest, opts ...grpc.CallOption) (*BatchGetDeviceStateReply, error) {
	out := new(BatchGetDeviceStateReply)
	err := c.cc.Invoke(ctx, "/api.dataProcessing.v1.WarningDetect/BatchGetDeviceStateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warningDetectClient) DeleteDeviceStateInfo(ctx context.Context, in *DeleteDeviceStateRequest, opts ...grpc.CallOption) (*DeleteDeviceStateReply, error) {
	out := new(DeleteDeviceStateReply)
	err := c.cc.Invoke(ctx, "/api.dataProcessing.v1.WarningDetect/DeleteDeviceStateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warningDetectClient) BatchGetWarning(ctx context.Context, in *BatchGetWarningRequest, opts ...grpc.CallOption) (*BatchGetWarningReply, error) {
	out := new(BatchGetWarningReply)
	err := c.cc.Invoke(ctx, "/api.dataProcessing.v1.WarningDetect/BatchGetWarning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warningDetectClient) DeleteWarning(ctx context.Context, in *DeleteWarningRequest, opts ...grpc.CallOption) (*DeleteWarningReply, error) {
	out := new(DeleteWarningReply)
	err := c.cc.Invoke(ctx, "/api.dataProcessing.v1.WarningDetect/DeleteWarning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warningDetectClient) UpdateWarning(ctx context.Context, in *UpdateWarningRequest, opts ...grpc.CallOption) (*UpdateWarningReply, error) {
	out := new(UpdateWarningReply)
	err := c.cc.Invoke(ctx, "/api.dataProcessing.v1.WarningDetect/UpdateWarning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarningDetectServer is the server API for WarningDetect service.
// All implementations must embed UnimplementedWarningDetectServer
// for forward compatibility
type WarningDetectServer interface {
	// 分页查询设备信息
	BatchGetDeviceStateInfo(context.Context, *BatchGetDeviceStateRequest) (*BatchGetDeviceStateReply, error)
	// 删除设备状态信息
	DeleteDeviceStateInfo(context.Context, *DeleteDeviceStateRequest) (*DeleteDeviceStateReply, error)
	// 分页查询用户的警告消息
	BatchGetWarning(context.Context, *BatchGetWarningRequest) (*BatchGetWarningReply, error)
	// 删除用户的警告消息
	DeleteWarning(context.Context, *DeleteWarningRequest) (*DeleteWarningReply, error)
	// 更新用户的警告消息的处理状态
	UpdateWarning(context.Context, *UpdateWarningRequest) (*UpdateWarningReply, error)
	mustEmbedUnimplementedWarningDetectServer()
}

// UnimplementedWarningDetectServer must be embedded to have forward compatible implementations.
type UnimplementedWarningDetectServer struct {
}

func (UnimplementedWarningDetectServer) BatchGetDeviceStateInfo(context.Context, *BatchGetDeviceStateRequest) (*BatchGetDeviceStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetDeviceStateInfo not implemented")
}
func (UnimplementedWarningDetectServer) DeleteDeviceStateInfo(context.Context, *DeleteDeviceStateRequest) (*DeleteDeviceStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceStateInfo not implemented")
}
func (UnimplementedWarningDetectServer) BatchGetWarning(context.Context, *BatchGetWarningRequest) (*BatchGetWarningReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetWarning not implemented")
}
func (UnimplementedWarningDetectServer) DeleteWarning(context.Context, *DeleteWarningRequest) (*DeleteWarningReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWarning not implemented")
}
func (UnimplementedWarningDetectServer) UpdateWarning(context.Context, *UpdateWarningRequest) (*UpdateWarningReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWarning not implemented")
}
func (UnimplementedWarningDetectServer) mustEmbedUnimplementedWarningDetectServer() {}

// UnsafeWarningDetectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarningDetectServer will
// result in compilation errors.
type UnsafeWarningDetectServer interface {
	mustEmbedUnimplementedWarningDetectServer()
}

func RegisterWarningDetectServer(s grpc.ServiceRegistrar, srv WarningDetectServer) {
	s.RegisterService(&WarningDetect_ServiceDesc, srv)
}

func _WarningDetect_BatchGetDeviceStateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetDeviceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarningDetectServer).BatchGetDeviceStateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.dataProcessing.v1.WarningDetect/BatchGetDeviceStateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarningDetectServer).BatchGetDeviceStateInfo(ctx, req.(*BatchGetDeviceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarningDetect_DeleteDeviceStateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarningDetectServer).DeleteDeviceStateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.dataProcessing.v1.WarningDetect/DeleteDeviceStateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarningDetectServer).DeleteDeviceStateInfo(ctx, req.(*DeleteDeviceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarningDetect_BatchGetWarning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetWarningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarningDetectServer).BatchGetWarning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.dataProcessing.v1.WarningDetect/BatchGetWarning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarningDetectServer).BatchGetWarning(ctx, req.(*BatchGetWarningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarningDetect_DeleteWarning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWarningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarningDetectServer).DeleteWarning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.dataProcessing.v1.WarningDetect/DeleteWarning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarningDetectServer).DeleteWarning(ctx, req.(*DeleteWarningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarningDetect_UpdateWarning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWarningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarningDetectServer).UpdateWarning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.dataProcessing.v1.WarningDetect/UpdateWarning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarningDetectServer).UpdateWarning(ctx, req.(*UpdateWarningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WarningDetect_ServiceDesc is the grpc.ServiceDesc for WarningDetect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarningDetect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.dataProcessing.v1.WarningDetect",
	HandlerType: (*WarningDetectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchGetDeviceStateInfo",
			Handler:    _WarningDetect_BatchGetDeviceStateInfo_Handler,
		},
		{
			MethodName: "DeleteDeviceStateInfo",
			Handler:    _WarningDetect_DeleteDeviceStateInfo_Handler,
		},
		{
			MethodName: "BatchGetWarning",
			Handler:    _WarningDetect_BatchGetWarning_Handler,
		},
		{
			MethodName: "DeleteWarning",
			Handler:    _WarningDetect_DeleteWarning_Handler,
		},
		{
			MethodName: "UpdateWarning",
			Handler:    _WarningDetect_UpdateWarning_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/dataProcessing/v1/warning_detect.proto",
}
