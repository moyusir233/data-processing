// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"gitee.com/moyusir/data-processing/internal/biz"
	"gitee.com/moyusir/data-processing/internal/conf"
	"gitee.com/moyusir/data-processing/internal/data"
	"gitee.com/moyusir/data-processing/internal/server"
	"gitee.com/moyusir/data-processing/internal/service"
	"gitee.com/moyusir/util/api/util/v1"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, arg []v1.DeviceStateRegisterInfo, logger log.Logger) (*kratos.App, func(), error) {
	redisData, cleanup, err := data.NewRedisData(confData)
	if err != nil {
		return nil, nil, err
	}
	influxdbData, cleanup2, err := data.NewInfluxdbData(confData)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	unionRepo := data.NewRepo(redisData, influxdbData)
	configUsecase := biz.NewConfigUsecase(unionRepo, logger)
	configService := service.NewConfigService(configUsecase, logger)
	warningDetectUsecase, err := biz.NewWarningDetectUsecase(unionRepo, arg, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	warningDetectService, cleanup3, err := service.NewWarningDetectService(warningDetectUsecase, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	httpServer := server.NewHTTPServer(confServer, configService, warningDetectService, logger)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
